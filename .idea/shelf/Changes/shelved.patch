Index: app/src/main/java/com/example/weatherapp/ui/WeatherCalendarScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.weatherapp.ui\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.weatherapp.R\r\nimport java.util.*\r\nimport androidx.compose.material.icons.filled.KeyboardArrowLeft\r\nimport androidx.compose.material.icons.filled.KeyboardArrowRight\r\n\r\n@Composable\r\nfun WeatherCalendarScreen(navController: NavController) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(Brush.verticalGradient(listOf(Color(0xFF3A7BD5), Color(0xFF00D2FF))))\r\n            .padding(16.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        // Header with \"Calendar\" title centered\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.SpaceBetween\r\n        ) {\r\n            IconButton(onClick = { navController.popBackStack() }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.ArrowBack, // Using default back arrow icon\r\n                    contentDescription = \"Back\",\r\n                    tint = Color.White\r\n                )\r\n            }\r\n            Text(\r\n                text = \"Calender\",\r\n                color = Color.White,\r\n                fontSize = 24.sp,\r\n                fontWeight = FontWeight.Bold,\r\n                modifier = Modifier.weight(1f),\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Spacer(modifier = Modifier.width(48.dp)) // To keep balance with the back button\r\n        }\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        ForecastCard()\r\n\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n\r\n        CalendarCard()\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ForecastCard() {\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clip(RoundedCornerShape(24.dp))\r\n            .background(\r\n                Brush.verticalGradient(\r\n                    listOf(Color(0xFFE0F7FA), Color(0xFFB2EBF2))\r\n                )\r\n            )\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp)) {\r\n            Text(text = \"Partly Cloudy\", color = Color.Black, fontSize = 16.sp)\r\n            Text(text = \"August, 10th 2024\", color = Color.Gray, fontSize = 14.sp)\r\n\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n\r\n            val forecastData = listOf(\r\n                \"Monday\" to R.drawable.storm,\r\n                \"Tuesday\" to R.drawable.rain,\r\n                \"Wednesday\" to R.drawable.rain,\r\n                \"Thursday\" to R.drawable.clouds,\r\n                \"Friday\" to R.drawable.storm,\r\n                \"Saturday\" to R.drawable.sunny,\r\n                \"Sunday\" to R.drawable.clouds\r\n            )\r\n\r\n            LazyColumn {\r\n                items(forecastData) { (day, icon) ->\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(vertical = 6.dp),\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Image(\r\n                            painter = painterResource(id = icon),\r\n                            contentDescription = day,\r\n                            modifier = Modifier.size(24.dp)\r\n                        )\r\n                        Spacer(modifier = Modifier.width(8.dp))\r\n                        Text(\r\n                            text = day,\r\n                            color = Color.Black,\r\n                            fontSize = 16.sp,\r\n                            modifier = Modifier.weight(1f)\r\n                        )\r\n                        Text(text = \"68° / 22°\", color = Color.Gray, fontSize = 14.sp)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun CalendarCard() {\r\n    Card(\r\n        shape = RoundedCornerShape(24.dp),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White),\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(400.dp)\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp)) {\r\n            // Weather Section\r\n            Row(\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.clouds),\r\n                    contentDescription = \"Weather Icon\",\r\n                    modifier = Modifier.size(50.dp)\r\n                )\r\n                Spacer(modifier = Modifier.width(8.dp))\r\n                Column {\r\n                    Text(text = \"Cloudy\", fontSize = 18.sp, fontWeight = FontWeight.SemiBold)\r\n                    Text(text = \"27° C\", fontSize = 17.sp, fontWeight = FontWeight.SemiBold)\r\n                }\r\n                Spacer(modifier = Modifier.weight(1f))\r\n                Column(horizontalAlignment = Alignment.End) {\r\n                    Text(\r\n                        text = \"August\",\r\n                        fontSize = 14.sp,\r\n                        fontWeight = FontWeight.Bold,\r\n                        textAlign = TextAlign.End\r\n                    )\r\n                    Text(\r\n                        text = \"2025\",\r\n                        fontSize = 22.sp,\r\n                        fontWeight = FontWeight.Bold,\r\n                        textAlign = TextAlign.End\r\n                    )\r\n                }\r\n            }\r\n\r\n            // Navigation arrows under \"August 2025\"\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(top = 4.dp),\r\n                horizontalArrangement = Arrangement.End,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                IconButton(\r\n                    onClick = { /* handle previous */ },\r\n                    modifier = Modifier.size(32.dp).padding(end = 2.dp) // nhỏ lại\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.KeyboardArrowLeft,\r\n                        contentDescription = \"Previous\"\r\n                    )\r\n                }\r\n                IconButton(\r\n                    onClick = { /* handle next */ },\r\n                    modifier = Modifier.size(32.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.KeyboardArrowRight,\r\n                        contentDescription = \"Next\"\r\n                    )\r\n                }\r\n            }\r\n\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n\r\n            CalendarView()\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun CalendarView() {\r\n    val daysOfWeek = listOf(\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\")\r\n    val daysInMonth = 31\r\n    val today = 13 // giả lập ngày hiện tại\r\n    val startDayOffset = 2 // Giả lập ngày 1 rơi vào thứ Sáu (offset = 2)\r\n\r\n    val days = List(startDayOffset) { 0 } + (1..daysInMonth).toList()\r\n    val filledDays = days + List((7 - days.size % 7) % 7) { 0 } // Bù cho đủ hàng cuối\r\n    val weeks = filledDays.chunked(7)\r\n\r\n    Column {\r\n        // Header: Days of Week\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceEvenly\r\n        ) {\r\n            daysOfWeek.forEach {\r\n                Text(\r\n                    text = it,\r\n                    fontSize = 14.sp,\r\n                    fontWeight = FontWeight.Bold,\r\n                    modifier = Modifier.width(40.dp),\r\n                    textAlign = TextAlign.Center\r\n                )\r\n            }\r\n        }\r\n\r\n        Spacer(modifier = Modifier.height(8.dp))\r\n\r\n        // Calendar Days\r\n        weeks.forEach { week ->\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 4.dp),\r\n                horizontalArrangement = Arrangement.SpaceEvenly\r\n            ) {\r\n                week.forEach { day ->\r\n                    if (day == 0) {\r\n                        Spacer(modifier = Modifier.size(40.dp))\r\n                    } else {\r\n                        val isToday = day == today\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .size(30.dp)\r\n                                .clip(RoundedCornerShape(4.dp)) // Changed to square shape with rounded corners\r\n                                .background(if (isToday) Color.Black else Color.Transparent), // Black background for today\r\n                            contentAlignment = Alignment.Center\r\n                        ) {\r\n                            Text(\r\n                                text = day.toString(),\r\n                                fontSize = 16.sp,\r\n                                fontWeight = if (isToday) FontWeight.Bold else FontWeight.Normal,\r\n                                color = if (isToday) Color.White else Color.Black\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun PreviewWeatherCalendarScreen() {\r\n    WeatherCalendarScreen(navController = rememberNavController())\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/weatherapp/ui/WeatherCalendarScreen.kt b/app/src/main/java/com/example/weatherapp/ui/WeatherCalendarScreen.kt
--- a/app/src/main/java/com/example/weatherapp/ui/WeatherCalendarScreen.kt	(revision a0de3e9721e63e02cc391f260cf37910dcb00e46)
+++ b/app/src/main/java/com/example/weatherapp/ui/WeatherCalendarScreen.kt	(date 1743950892535)
@@ -1,4 +1,4 @@
-package com.example.weatherapp.ui
+package com.example.weatherapp
 
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
@@ -93,11 +93,11 @@
             val forecastData = listOf(
                 "Monday" to R.drawable.storm,
                 "Tuesday" to R.drawable.rain,
-                "Wednesday" to R.drawable.rain,
-                "Thursday" to R.drawable.clouds,
+                "Wednesday" to R.drawable.sunny,
+                "Thursday" to R.drawable.cloudrain,
                 "Friday" to R.drawable.storm,
-                "Saturday" to R.drawable.sunny,
-                "Sunday" to R.drawable.clouds
+                "Saturday" to R.drawable.ic_cloudy,
+                "Sunday" to R.drawable.ic_sunny
             )
 
             LazyColumn {
@@ -144,7 +144,7 @@
                 modifier = Modifier.fillMaxWidth()
             ) {
                 Image(
-                    painter = painterResource(id = R.drawable.clouds),
+                    painter = painterResource(id = R.drawable.ic_cloudy),
                     contentDescription = "Weather Icon",
                     modifier = Modifier.size(50.dp)
                 )
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision a0de3e9721e63e02cc391f260cf37910dcb00e46)
+++ b/.idea/deploymentTargetSelector.xml	(date 1743950902240)
@@ -5,6 +5,9 @@
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
+      <SelectionState runConfigName="PreviewWeatherCalendarScreen">
+        <option name="selectionMode" value="DROPDOWN" />
+      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
